************cat.c**************
#include "ucode.c"

#define MAX_RD_SZ 1024

int main(int argc, char * argv[]){

	char buf[MAX_RD_SZ];
	char *cat_hello = "tcruz cat ^   ^\n\r           o o\n\r           =v=\n\r           ---\n\r***********************\n\r";
	char *cat_fail = "fail cat  ^   ^ (file doesn't exist)\n\r           _ _\n\r           =v=\n\r            _ \n\r***********************\n\r";
	char *redin_message ="redin redirected\n\r";
	char *redout_message ="redout redirected\n\r";
	int read_amount;
	char c;
	STAT s;
	int fd, redin, redout;
	int size_remain;
	int i = 0, n = 0;

	redin = is_stdin_red();
	redout = is_stdout_red();

	//write to stderr because io may have directed away from stdout

	bzero(buf, MAX_RD_SZ);

	// if(redin){
	// 	write(2, redin_message, strlen(redin_message));
	// }
	// if(redout){
	// 	write(2, redout_message, strlen(redout_message));
	// }


	//if argc < 1 I should exit

	if(argc <= 1){
		fd = 0;
		read_amount = 1;

	}
	else{
		fd = open(argv[1], O_RDONLY);

		if(fd < 0){
			write(2, cat_fail, strlen(cat_fail));
			close(2);
			exit(1);
		}

		read_amount = MAX_RD_SZ;
	}

	//don't print if we aint in the
	if(!(redin && redout)){
		write(2, cat_hello, strlen(cat_hello));
	}

	fstat(fd, &s);
	size_remain = s.st_size;

	//printf("size_remain: %d\n", size_remain);
	n = read(fd, buf, read_amount);

	while(n > 0){
		for (i=0; i<n; i++){

			//readin from 0 stdin, or redirected stdin
			if (fd==0){
        		if (buf[i]=='\r' && !redin) 
  	       			buf[i]='\n';     // change \r to \n
  	       		else if(buf[i]=='\r' && redin)
  	       			continue;


  	   			write(1, &buf[i], 1);
       			if (redin && redout) // cat in between pipes as in cat f | CAT | cat
  	       			continue;       // do not spit out anything

  	       		//getting from term, so put carriage return
  	   			if ((!redin) && (buf[i]=='\n')){
  	   				write(2, "\r", 1);
	  	   		}

	  	   		//still echo to term if getting from term and out if redirected
	  	   		if (redout){
	  	   			write(2, &buf[i], 1);
	  	   			if ( buf[i]=='\n')
	  	   				write(2, "\r", 1);
	  	   		}

  			}
  			else{//getting from a file or something
  				write(1, &buf[i], 1);
  				if (buf[i]=='\n'){
  					write(2, "\r", 1);
  				}
  			}
    	}

    	n = read(fd, buf, read_amount);
}

	exit(0);
}
	

int is_stdout_red(){
	STAT norm, curr;
	int n, c;
	char buf[32];

	gettty(buf);

	n = stat(buf, &norm);
	c = fstat(1, &curr);

	//if(n < 0 || c < 0 return )

	if(norm.st_dev == curr.st_dev && norm.st_ino == curr.st_ino){
		return 0;
	}	

	return 1;
}

int is_stdin_red(){
	STAT norm, curr;
	int n, c;
	char buf[32];

	gettty(buf);

	n = stat(buf, &norm);
	c = fstat(0, &curr);

	//if(n < 0 || c < 0 return )

	if(norm.st_dev == curr.st_dev && norm.st_ino == curr.st_ino){
		return 0;
	}	

	return 1;
}*****************cp.c*********************
#include "ucode.c"

#define MAX_READ_SZ 1024

int main(int argc, char *argv[]){

	int from_fd, to_fd;

	char *err1 = "cp <src> <dest>\n\r";
	char *err2 = "cp src file doesn't exit\n\r";
	char *err3 = "creat dest error\n\r";
	int n;
	char buf[MAX_READ_SZ];
	int read_amount = MAX_READ_SZ;

	printf("***** cp tcruz ******\n");

	bzero(buf, MAX_RD_SZ);
	gettty(buf);
	curr_fd = open(buf, O_WRONLY);
	bzero(buf, MAX_RD_SZ);

	if(argc < 3){
		write(curr_fd, err1, strlen(err1));
		close(curr_fd);
		exit(1);
	}

	from_fd = open(argv[1], O_RDONLY);

	if(from_fd < 0){
		printf("%s\n", argv[1]);
		write(curr_fd, err2, strlen(err2));
		close(curr_fd);
		exit(1);
	}

	to_fd = open(argv[2],  O_WRONLY|O_CREAT|O_TRUNC);

	if(to_fd < 0){

		write(curr_fd, err3, strlen(err3));
		close(curr_fd);
		exit(1);
	}

	bzero(buf, MAX_READ_SZ);

	n = read(from_fd, buf, read_amount);

	while(n > 0){

		write(to_fd, buf, n);

		n = read(from_fd, buf, read_amount);
	}

	close(from_fd);
	close(to_fd);
	close(curr_fd);

}*********************init.c********************
#include "ucode.c"

int console, s0, s1;

int main(argc, argv) int argc; char* argv[];
{
	int stdin, stdout, stderr;
	//return fds for stdin and stdout
	stdin  = open("/dev/tty0", O_RDONLY); 	// stdin is READ //0
	stdout = open("/dev/tty0", O_WRONLY);					 //1
	stderr = open("/dev/tty0", O_WRONLY);	

	// printf() now possible
	printf("** tcruz init: fork login process **\n");

    printf("tcruz init fork login to serial port 0\n");
    s0 = fork();
    if (s0){
       	printf("tcruz init fork login to serial port 1\n");
       	s1 = fork();
  		if (s1){
       		printf("tcruz init fork login to qemu terminal\n");
	 		console = fork();
       	if (console)
          	parent();
       	else
	    	exec("login /dev/tty0");
      }
       else
         exec("login /dev/ttyS1");
    }
    else
      exec("login /dev/ttyS0");
}

int login()
{
	exec("login /dev/tty0");
}


int parent()
{
  int pid, status;
  printf("tcruz init: waiting for ZOMBIE children ...\n");
  while(1){
  	pid = wait(&status);

  	if(status == 99){
  		printf("peace out ");
  		if(pid == console){
  			printf("console\n");
  		}else if(pid == s0){
  			printf("serial 0\n");
  		}
  		else if(pid == s1){
  			printf("serial 1\n");
  		}

  		exit(1);
  	}
    
    if (pid==console){
		console = fork();
      	if (console)
	 		continue;
       else
         exec("login /dev/tty0");
    }
    else if (pid==s0){

    	s0 = fork();
       	if (s0)
	 		continue;
       	else
         	exec("login /dev/ttyS0");
    }
    else if (pid==s1){

    	s1 = fork();
       	if (s1)
	 		continue;
       	else
         	exec("login /dev/ttyS1");
    }

    printf("tcruz init: I just buried an orphan child task %d\n", pid);
  }
}**********login.c******************
//login.c  argv[0] = login, argv[1] = /dev/ttyX

#include "ucode.c"

int stdin, stdout, stderr;
char *passwd_file = "/etc/passwd";

main(int argc, char *argv[]){

	int passwd_fd;//holds fd of /etc/passwd file
	int size_remain;
	int i;
	int num_tokens;
	int uid, gid;
	char user[64], pass[64];
	
	char line[448]; //(8 * 64) = 512
	char tokens[7][64];

	STAT s;

	//STEP 1:
	//close fds 0, 1 inherited from init
	close(0);
	close(1);

	//STEP 2:
	//get fds for std: in, out, and err.
	stdin = open(argv[1], 0);
	stdout = open(argv[1], 1);
	stderr = open(argv[1], 2);

	//STEP 3:
	//set tty name string of PROC.tty
	settty(argv[1]);

	while(1){

		//STEP 4:
		//open /etc/passwd file for READ (defined in type.h)
		//could put this outside of this loop if lseek worked
		passwd_fd = open(passwd_file, O_RDONLY);

		//STEP 5:
		//get username
		printf("login: ");		
		gets(user);

		//get password
		printf("password: ");
		gets(pass);

		stat(passwd_file, &s);
		size_remain = s.st_size;

		printf("size_of passwd: %d\n", size_remain);

		while(1){

			for(i = 0; size_remain > 0 && i < 448 - 1; i++){
				read(passwd_fd, &line[i], 1);
				size_remain--;

				//newline put null char
				if(line[i] == '\n') {
					line[i] = 0;
					break;
				}

				//last char, put null char
				if(size_remain <= 0){
					line[i + 1] = 0;
					break;
				}
			}

			//here we have one line
			num_tokens = tokenize(line, tokens, ':');

			//bad line in /etc/passwd file
			if(num_tokens != 7){
				continue;
			}

			//0=usrname, 1=pssword, 2=gid, 3=uid, 4=fullname, 5=HOMEDIR, 6=program
			//printf("%s %s\n", user, tokens[0]);
			//printf("%s %s\n", pass, tokens[1]);

			if(strcmp(user, tokens[0]) == 0 && strcmp(pass, tokens[1]) == 0){
				printf("wassup, %s!\n", tokens[4]);

				//change uid and gid
				uid = atoi(tokens[3]);
				gid = atoi(tokens[2]);
				chuid(uid, gid);

				//change CWD to HOMEDIR
				chdir(tokens[5]);

				//close opened /etc/passwd file
				close(passwd_fd);
				exec(tokens[6]);

				printf("failed execution of %s\n", tokens[6]);
				

			}//else{
				//printf("fail\n");
			//}


			if(size_remain <= 0){
				printf("login failed, playboi...\n");
				break;
			}

		}

		//seek to beginning doesn't work
		//lseek(passwd_fd, 0);
		close(passwd_fd);
	}
}

//return negative or 0 if line is not good
//will return number of tokens 
int tokenize(char *line, char tokens[7][64], char delimiter){

	int i = 0, j = 0;

	while(*line && i < 7){


		if(*line == delimiter){
			tokens[i][j] = 0; //null term this token

			if(j)
				i++;

			j = 0;
			line++;
			continue;
		}

		tokens[i][j++] = *line;

		line++;
	}

	if(j == 0){
		return i;
	}

	return i + 1;
}*************sh.c*******************


#include "ucode.c"

char *easy_cmds[] = {"cd", "su", "logout", "echo", "exit", 0};

main (int argc, char *argv[])
{
	char cmd_line[640];
	char tokens [10][64];
	int num_tokens;
	int i, pid, status, ino, dev;
	//int passwd_fd;

	printf("Welcome to the Cruz Shell!\n");
	printf("Enter ? for menu\n");

	while(1){

		getcwd(cmd_line);
		printf("%s ", cmd_line);
		printf("cruzsh: ");
		bzero(cmd_line, 640);
		gets(cmd_line);
		i = remove_extra_space(cmd_line);

		if(i >= 0){
			//if i == 0, no spaces were removed
			//if i > 0 space was removed

		}else{
			//nothing or all spaces line
			continue;
		}

		num_tokens = tokenize(cmd_line, tokens, ' ');
		if(num_tokens <= 0)
			continue;

		if(is_easy(tokens[0])){
			printf("EASY!\n");
			do_easy(num_tokens, tokens);
			continue;
		}

		pid = fork();

		if(pid){
			//printf("wait for child...\n");
			pid = wait(&status);
			//printf("child died with %d\n", status);

		}else{
			//child does something and exit
			
			do_pipe(cmd_line, 0);
			//printf("hi, from child.\n");
			exit(99);
		}

	}
		
}

int do_pipe(char *cmd_line, int *pd){

	int has_pipe;
	char head[128], tail[128];
	int pid;
	int lpd[2];

	if(pd){
		close(pd[0]); dup2(pd[1], 1); close(pd[1]);
	}

	has_pipe = pipe_scan(cmd_line, head, tail);

	if(has_pipe){
		// printf("has pipe\n");
		// printf("h:%s.\n", head);
		// printf("t:%s.\n", tail);
		if (pipe(lpd) < 0){ // create LEFT side pipe
         	printf("*process (%d) pipe fail\n*", getpid());
         	exit(1);
      	}

		pid = fork();

		if(pid){
			close(lpd[1]); dup2(lpd[0], 0); close(lpd[0]);
			do_command(tail);

		}else{
			do_pipe(head, lpd);
		}


	}else{
		do_command(cmd_line);
		exit(9);
	}
}

int do_command(char * cmd_line){

	int r;
	//scan for redirection
	//cmd_line will be chopped if io redirect is found
	r = rio_scan(cmd_line);

	exec(cmd_line);
	//exit();
}

//won't receive an empty line here
int pipe_scan(char * cmd_line, char *head, char *tail){

	int has_pipe = 0, i = 0;
	char *cp = cmd_line;
	int len = strlen(cmd_line);

	while(*cp){

		if(*cp == '|'){
			has_pipe++;
			break;
		}

		cp++;
	}

	if(!has_pipe){
		return 0;
	}

	//go to end start search
	cp = &(cmd_line[len - 1]);
	i = len - 1;

	while(i >= 0){
		cp = &(cmd_line[i--]);

		if(*cp == '|'){
			break;
		}
	}

	//now cp points right most pipe
	*cp = 0;
	strcpy(head, cmd_line);
	cp++;
	strcpy(tail, cp);

	remove_extra_space(head);
	remove_extra_space(tail);

	return 1;
}

//redirect io scan
//return 1 if redirect io is found
//return 0 if not found
//return -1 if can not redirect to file

int rio_scan(char * cmd_line){
	int has_rio = 0;
	int fd;
	int in = 0;
	int out = 0;
	char file_name[32];
	char *cp = cmd_line;


	//int len = strlen(cmd_line);
	while(*cp){
		if(*cp == '<'){
			//redirect input (stdin))
			in = 1;
			*cp = 0;//null terminate the cmd_line to only be head
			cp++; //move cp to beginning of file name
			break;
		}
		if(*cp == '>'){
			//redirect output (stdout)
			out = (O_WRONLY|O_CREAT|O_TRUNC);
			*cp = 0;//null terminate the cmd_line to only be head
			cp++; //move cp to beginning of file name

			if(*cp == '>'){
				out = (O_WRONLY|O_CREAT|O_APPEND);
				cp++; //more cp to beginning of file name
			}

			break;
		}	
		cp++;
	}

	if(!in && !out){
		return 0;
	}

	remove_extra_space(cmd_line);
	//printf("exec:.%s.\n", cmd_line);
	//get file name to redirect to
	strcpy(file_name, cp);
	remove_extra_space(file_name);
	//printf("to:.%s.\n", file_name);

	//redirect input
	if(in){
		fd = open(file_name, O_RDONLY);

		if(fd < 0){ //file doesn't exist
			//printf("%s doesn't exist\n", file_name);
			//creat file file
			return -1;
		}

		dup2(fd, 0);
		close(fd);
		return 1;
	}

	//redirect output
	if(out){
		fd = open(file_name, out);

		//file doesn't exist
		if(fd < 0){
			return -1;
		}

		dup2(fd, 1);
		close(fd);
		return 2;
	}

	//should never get here
	return -1;

}

int tokenize(char *line, char tokens[10][64], char delimiter){

	int i = 0, j = 0;

	while(*line && i < 10){


		if(*line == delimiter){
			tokens[i][j] = 0; //null term this token

			if(j)
				i++;

			j = 0;
			line++;
			continue;
		}

		tokens[i][j++] = *line;
		tokens[i][j] = 0;

		//overflow of a token
		//if(j >= 64)

		line++;
	}

	if(j == 0){
		return i;
	}


	return i + 1;
}

int remove_extra_space(char *cmd_line){
	
	char buf[640];
	char *cp;
	int space = 1, i = 0;
	int len = strlen(cmd_line);

	cp = cmd_line;

	while(*cp){

		if(*cp != ' '){
			space = 0;
		}

		if(space == 0){

			buf[i++] = *cp;
		}

		if(*cp == ' '){
			space = 1;
		}

		cp++;
	}

	//all spaces or nothing
	if(i == 0){
		strcpy(cmd_line, "");
		return -1;
	}

	buf[i] = 0;//null terminate the buffer

	if(buf[i - 1] == ' '){
		//buf[strlen(buf) - 1] = 0;
		i--;
		buf[i] = 0;
	}

	strcpy(cmd_line, buf);

	//return #of spaces removed
	return i == len ? 0 : len - i; 
}

int is_easy(char *cmd){

	int i = 0;

	for(i=0; easy_cmds[i]; i++){

		if(strcmp(cmd, easy_cmds[i]) == 0){
			return 1;
		}
	}

	return 0;
}

int do_easy(int num_tokens, char tokens[10][64]){

	int i;

		if(strcmp(tokens[0], "cd")==0){
			if (num_tokens < 2){
				printf("missing 2nd parameter for cd\n");
				chdir("/");
			}else{
				chdir(tokens[1]);
			}

			return 1;
		}

		if(strcmp(tokens[0], "logout")==0){
			chdir("/"); 
			exit(1);
			return 1;
		}

		if(strcmp(tokens[0], "su")==0){
			//prompt for password
			//open password file /etc/passwd
			//check to see if matches root password
			//if matches root do chuid(uid, gid)
			su();
			return 1;
		}

		if(strcmp(tokens[0], "echo") == 0){
			for(i = 1; i < num_tokens; i++){
				printf("%s ", tokens[i]);
			}

			return 1;
		}

		if(strcmp(tokens[0], "exit") == 0){
			exit(99);
		}

		printf("easy but not yet implemented\n");
		return 0;

}

int su()
{
	int curr_id;
  	char buf[64];

  	curr_id = getuid(); 

  	if (curr_id == 0){
    	printf("YOU ARE ALREADY SUPER\n");
    	return 0;
  	} 

  	bzero(buf, 64);
  	printf("SUPER PASS: ");
  	gets(buf);

  	//password for root hardcoded
  	//otherwise we would open passwd file in etc/
  	//then check password match with all uid == 0
  	if (strcmp(buf, "12345")==0){
      	setuid(0, 0);    
  	} 
  	else
    {
    	printf("invalid password.\n");
    }
}  
***********grep.c**********************
#include "ucode.c"

int main(int argc, char * argv[]){

	char pattern[32];
	char file_name[32];
	char buf[MAX_RD_SZ];
	char line[MAX_RD_SZ];
	int fd = 0;//default to stdin
	int n, redin, redout;
	int i = 0;

	char *grep_hello = "***** tcruz grep ******\r\n";
	char *err1 = "grep <pattern> <file>\n\r";
	char *err2 = "file doesn't exist\n\r";
	int curr_fd;

	redin = is_stdin_red();
	redout = is_stdout_red();

	bzero(buf, MAX_RD_SZ);
	gettty(buf);
	curr_fd = open(buf, O_WRONLY);
	bzero(buf, MAX_RD_SZ);

	if(!(redin && redout))
		write(curr_fd, grep_hello, strlen(grep_hello));

	if(argc >= 3){
		strcpy(pattern, argv[1]);
		strcpy(file_name, argv[2]);

		//open file for read
		fd = open(file_name, O_RDONLY);

		if(fd < 0){
			write(curr_fd, err2, strlen(err2));
			close(curr_fd);
			exit(1);
		}
	}
	else if(argc == 2){
		strcpy(pattern, argv[1]);
		bzero(file_name, 32);
		//read from stdin
	}else{
		write(curr_fd, err1, strlen(err1));
		close(curr_fd);
		exit(1);
	}
	bzero(buf, MAX_RD_SZ);

	i = 0;
	n = read(fd, &buf[i], 1);

	while(n > 0){

		//reading from stdin and not redirected
		//we need to see what we are typing
		if (fd==0 && !redin){
			if (buf[i]=='\r'){
				buf[i] = '\n';
				write(curr_fd, "\n\r", 2);
			}  // change \r to \n
			else{
				write(curr_fd, &buf[i], 1);
			}
		}

		if(buf[i] == '\n'){
			
			if(match(pattern, line)){
				printf("%s\n", line);
			}

			i = 0;
			bzero(line, MAX_RD_SZ);
			bzero(buf, MAX_RD_SZ);

		}else{
			line[i] = buf[i];
			line[i+1] = 0;
			i++;
		}
		
		n = read(fd, &buf[i], 1);

		if(n <= 0){
			//check line one more time
			if(match(pattern, line)){
				printf("%s\n", line);
			}
		}
	}

	close(curr_fd);
}

int match(char *pattern, char *string){
	char *cpp, *cps;

	cpp = pattern;
	cps = string;

	while(*cps){
		if(*cpp == *cps){
			cpp++;//move to next letter of pattern
		}else{
			cpp = pattern; // go to beginning of pattern if no match
		}

		if(*cpp == 0){
			//got to the end of a pattern, so match was found
			return 1;
		}

		cps++;
	}

	return 0;
}

int is_stdout_red(){
	STAT norm, curr;
	int n, c;
	char buf[32];

	gettty(buf);

	n = stat(buf, &norm);
	c = fstat(1, &curr);

	//if(n < 0 || c < 0 return )

	if(norm.st_dev == curr.st_dev && norm.st_ino == curr.st_ino){
		return 0;
	}	

	return 1;
}

int is_stdin_red(){
	STAT norm, curr;
	int n, c;
	char buf[32];

	gettty(buf);

	n = stat(buf, &norm);
	c = fstat(0, &curr);

	//if(n < 0 || c < 0 return )

	if(norm.st_dev == curr.st_dev && norm.st_ino == curr.st_ino){
		return 0;
	}	

	return 1;
}**************l2u.c*******************
#include "ucode.c"

#define MAX_READ_SZ 1024

int main(int argc, char *argv[]){

	int from_fd, to_fd;
	char *l2u_hello = "**** tyler l2u ****\r\n";
	char *err1 = "l2u <src> <dest>\n\r";
	char *err2 = "l2u src file doesn't exit\n\r";
	char *err3 = "creat dest error\n\r";
	int size_remain;
	int n, i;
	char buf[MAX_READ_SZ];
	int read_amount = MAX_READ_SZ;
	int redin, redout;

	//printf("l2u tcruz\n");

	redin = is_stdin_red();
	redout = is_stdout_red();

	//say hello if not between pipes
	if(!(redin && redout)){
		write(2, l2u_hello, strlen(l2u_hello));
	}

	if(argc < 3){
		//write(2, err1, strlen(err1));
		//exit(1);
		from_fd = 0;
		to_fd = 1;
		read_amount = 1;
	}
	else{
		from_fd = open(argv[1], O_RDONLY);

		if(from_fd < 0){
			printf("%s\n", argv[1]);
			write(2, err2, strlen(err2));
			close(2);
			exit(1);
		}

		to_fd = open(argv[2],  O_WRONLY|O_CREAT|O_TRUNC);

		if(to_fd < 0){

			write(2, err3, strlen(err3));
			close(2);
			exit(1);
		}
	}

	bzero(buf, MAX_READ_SZ);

	n = read(from_fd, buf, read_amount);

	while(n > 0){

		for(i = 0; i < n; i++){
			if(buf[i] >= 'a' && buf[i] <= 'z')
				buf[i]-=32;

			//readin from 0 stdin, or redirected stdin
			if (from_fd==0){
        		if (buf[i]=='\r' && !redin) 
  	       			buf[i]='\n';     // change \r to \n
  	       		else if(buf[i]=='\r' && redin)
  	       			continue;

  	   			write(1, &buf[i], 1);
       			if (redin && redout) // cat in between pipes as in cat f | CAT | cat
  	       			continue;       // do not spit out anything

  	       		//getting from term, so put carriage return
  	   			if ((!redout) && (buf[i]=='\n')){
  	   				write(2, "\r", 1);
	  	   		}

	  	   		//still echo to term if getting from term and out if redirected
	  	   		if (redout){
	  	   			write(to_fd, &buf[i], 1);
	  	   			if (buf[i]=='\n')
	  	   				write(2, "\r", 1);
	  	   		}

  			}
  			else{//getting from a file or something
  				write(to_fd, &buf[i], 1);
  				if (buf[i]=='\n'){
  					write(2, "\r", 1);
  				}
  			}
		}

		//write(to_fd, buf, n);

		n = read(from_fd, buf, read_amount);
	}

	close(from_fd);
	close(to_fd);

}

int is_stdout_red(){
	STAT norm, curr;
	int n, c;
	char buf[32];

	gettty(buf);

	n = stat(buf, &norm);
	c = fstat(1, &curr);

	//if(n < 0 || c < 0 return )

	if(norm.st_dev == curr.st_dev && norm.st_ino == curr.st_ino){
		return 0;
	}	

	return 1;
}

int is_stdin_red(){
	STAT norm, curr;
	int n, c;
	char buf[32];

	gettty(buf);

	n = stat(buf, &norm);
	c = fstat(0, &curr);

	//if(n < 0 || c < 0 return )

	if(norm.st_dev == curr.st_dev && norm.st_ino == curr.st_ino){
		return 0;
	}	

	return 1;
}*****************more.c*****************
#include "ucode.c"

#define MAX_RD_SZ 1024

int main(int argc, char * argv[]){

	char buf[MAX_RD_SZ];
	char line[MAX_RD_SZ];

	char *more_hello = "****tcruz more*****\n\r";
	char *err1 = "can't more from stdin\r\n";
	char *err2 = "can't more, file doesn't exist\r\n";
	char c;
	STAT s;
	int fd, redin, redout;
	int size_remain;
	int i = 0, n = 0, j = 0, k = 0;
	int print_amount = 0;
	int curr_fd;
	int temp_fd;

	redin = is_stdin_red();
	redout = is_stdout_red();

	bzero(buf, MAX_RD_SZ);
	gettty(buf);
	curr_fd = open(buf, O_WRONLY);

	if(!redin && argc < 2){
		write(curr_fd, err1, strlen(err1));
		close(curr_fd);
		exit(0);
	}

	//write to stderr because io may have directed away from stdout

	bzero(buf, MAX_RD_SZ);
	bzero(line, MAX_RD_SZ);

	if(argc <= 1){
		fd = 0;
	}
	else{

		fd = open(argv[1], O_RDONLY);

		if(fd < 0){
			write(curr_fd, err2, strlen(err2));
			close(curr_fd);
			exit(1);
		}
	}

	if(!(redin && redout)){
		write(curr_fd, more_hello, strlen(more_hello));
	}

	if(redin && !redout){
		gettty(buf);
		temp_fd = open(buf, O_RDONLY);
		bzero(buf, MAX_RD_SZ);
	}

	fstat(fd, &s);
	size_remain = s.st_size;

	//n = read(fd, buf, MAX_RD_SZ);
	print_amount = 24;

	n = 1;

	while(1){
		for(i = 0; i < print_amount && n; i++){
			n = get_line_more(fd, buf);

			if(!redout){
				if(n)
					printf("%s\r", buf);
				else{
					printf("%s\r\n", buf);
					close(curr_fd);
					exit(1);
				}
			}
			else
				{
					printf("%s", buf);
					exit(1);
				}
		}

		if(!redout){
			//get new print amount
			if(!redin){
				c = getc();
			}else{
				read(temp_fd, &c, 1);
			}
	
			

			switch(c){
				case ' ': print_amount = 24; break;
				case '\r' : print_amount = 1; break;
				default: print_amount = 0; break;
		}
	}
}

//close(fd);
close(temp_fd);
close(curr_fd);
	exit(0);
}
	

int is_stdout_red(){
	STAT norm, curr;
	int n, c;
	char buf[32];

	gettty(buf);

	n = stat(buf, &norm);
	c = fstat(1, &curr);

	//if(n < 0 || c < 0 return )

	if(norm.st_dev == curr.st_dev && norm.st_ino == curr.st_ino){
		return 0;
	}	

	return 1;
}

int is_stdin_red(){
	STAT norm, curr;
	int n, c;
	char buf[32];

	gettty(buf);

	n = stat(buf, &norm);
	c = fstat(0, &curr);

	//if(n < 0 || c < 0 return )

	if(norm.st_dev == curr.st_dev && norm.st_ino == curr.st_ino){
		return 0;
	}	

	return 1;
}

int get_line_more(int fd, char *buf){

	int n;

	while(n = read(fd, buf, 1) > 0){
		
		if(*buf == '\n'){
			*(buf+1) = 0;
			return 1;
			break;
		}

		buf++;
	}

	*buf = 0;

		//end
	return 0;
}







//for(; i < print_amount && j < n; j++){
		// 	line[k] = buf[j];
		// 	line[k + 1] = 0;

		// 	if(buf[j] == '\n'){
		// 		i++;
		// 		if(redout){

		// 			printf("%s", line);
		// 		}else{
		// 			printf("%s\r", line);
		// 		}

		// 		k = 0;
		// 		bzero(line, MAX_RD_SZ);
		// 	}else{
		// 		k++;
		// 	}
		// }



		// //need more but exhausted buf
		// if(i < print_amount){
		// 	j = 0;

		// 	bzero(buf, MAX_RD_SZ);
		// 	n = read(fd, buf, MAX_RD_SZ);

		// 	//leftover in line but no more in file
		// 	if(n <= 0){
		// 		if(redout){

		// 			printf("%s", line);
		// 		}else{
		// 			printf("%s\r", line);
		// 		}

		// 		bzero(line, MAX_RD_SZ);
		// 		//return done
		// 	}
		// }

		// if(!redout && i >= print_amount){
		// 	//get new print amount
		// 	i = 0;
		// 	c = getc();

		// 	switch(c){
		// 		case ' ': print_amount = 24; break;
		// 		case '\r' : print_amount = 1; break;
		// 		default: print_amount = 0; break;
		// 	}
		// }
